Gekozen taal: Pascal

Turing-compleet omdat: Pascal turing compleet is

 

Code is geschreven in functionele stijl.

 

Taal ondersteunt:

Loops? Voorbeeld: [pascal.txt] - [24-27]

Goto-statements? Voorbeeld: [pascal.txt] - [regel]

Lambda-calculus? Voorbeeld: [pascal.txt] - [30] (met variables en function calls)

 

Bevat:

Classes met inheritance: bijvoorbeeld [file] - [regel]

Object-printing voor elke class: [ja/nee]

Decorator: functiedefinitie op [file] - [regel], toegepast op [file] - [regel]

Type-annotatie: Haskell-stijl in comments: [ja/nee]; Python-stijl in functiedefinities: [ja/nee]

Minstens drie toepassingen van hogere-orde functies:

1. [file] - [regel]

2. [file] - [regel]

3. [file] - [regel]

 

Interpreter-functionaliteit Must-have:

Functies: [één per file / meer per file] [Check]

Functie-parameters kunnen aan de interpreter meegegeven worden door: Door ReadLn functie

Functies kunnen andere functies aanroepen: zie voorbeeld [file] - [regel]

Functie resultaat wordt op de volgende manier weergegeven:

