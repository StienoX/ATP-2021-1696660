Gekozen taal: Pascal

Turing-compleet omdat: pascal turing complete echter ik heb niet alles van pascal kunnen implementeren. Maar conditional branching door middel van if's en repeats zijn geimplementeerd en de mogelijkheid on een willekeurige hoeveelheid geheugen aan te passen is mogelijk door middel van nieuwe variable te declaren.

 

Code is geschreven in functionele stijl.

 

Taal ondersteunt:

Loops? Voorbeeld: [pascal.txt] - [16]

Goto-statements? Voorbeeld: [pascal.txt] - [27 & 29]

Lambda-calculus? Voorbeeld: [pascal.txt] - [22] (met variables en function calls)

 

Bevat:

Classes met inheritance: bijvoorbeeld [utils.py] - [66-250]

Object-printing voor elke class: [ja]

Decorator: functiedefinitie op [parser.py] - [444], toegepast op [parser.py] - [451]

Type-annotatie: Haskell-stijl in comments: [ja]; Python-stijl in functiedefinities: [ja]

Minstens drie toepassingen van hogere-orde functies:

1. [lexer.py] - [101] (reduce)

2. [parser.py] - [144] (parse_until_no_change)

3. [interpreter.py] - [65] (map)

4. [utils.py] - [17] (filter)

5. (Zijn er heel veel, Bijna elke functie gebruikt een hogere orde functie, bv r_check, lex_something)

Interpreter-functionaliteit Must-have:

Functies: [één per file / meer per file] [Check]

Functie-parameters kunnen aan de interpreter meegegeven worden door: Door de ReadLn functie

Functies kunnen andere functies aanroepen: zie voorbeeld [pascal_test_functions.txt] - [3-17]

Functie resultaat wordt op de volgende manier weergegeven: Door de WriteLn functie

Compiler Features:
Gebruikt alleen de stack wanneer dat nodig is. Indien we genoeg hebben aan alleen registers wordt de stack niet gebruikt.
Expressies werken met variables, constanten en kunnen complex in elkaar worden gezet. bijvoorbeeld 'j := (1*j+1)*(j+1*2)*(1+1*j)' werkt.
Function calls werken (ook recursief).
If statements werken.
Repeats werken.

Limitaties Compiler:

Maximium van 4 parameters in function calls (meerdere variable in een functie nog steeds mogelijk door declaratie in functie body)
In een function call kunnen expressies worden gebruikt maar parameter 
Alleen de volgende operator zijn geimplementeerd: +, *, -, :=, (), =. Vergelijken '=' en assignment ':=' kunnen alleen aan de "top" van de expression worden gebruikt. Bijvoorbeeld x = (3 * 5 + 2) + 1 is valide, maar ook (2 * x) = 3. (3 = x) + (2 = x) werkt *niet*. Ze moeten logischerwijs op het laatst worden uitgevoerd.
array en string datatypes zijn niet geimplementeerd.
Geen error handeling. 